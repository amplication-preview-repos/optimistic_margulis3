/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TemplateNotificationService } from "../templateNotification.service";
import { TemplateNotificationCreateInput } from "./TemplateNotificationCreateInput";
import { TemplateNotification } from "./TemplateNotification";
import { TemplateNotificationFindManyArgs } from "./TemplateNotificationFindManyArgs";
import { TemplateNotificationWhereUniqueInput } from "./TemplateNotificationWhereUniqueInput";
import { TemplateNotificationUpdateInput } from "./TemplateNotificationUpdateInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";

export class TemplateNotificationControllerBase {
  constructor(protected readonly service: TemplateNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TemplateNotification })
  async createTemplateNotification(
    @common.Body() data: TemplateNotificationCreateInput
  ): Promise<TemplateNotification> {
    return await this.service.createTemplateNotification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TemplateNotification] })
  @ApiNestedQuery(TemplateNotificationFindManyArgs)
  async templateNotifications(
    @common.Req() request: Request
  ): Promise<TemplateNotification[]> {
    const args = plainToClass(TemplateNotificationFindManyArgs, request.query);
    return this.service.templateNotifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TemplateNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async templateNotification(
    @common.Param() params: TemplateNotificationWhereUniqueInput
  ): Promise<TemplateNotification | null> {
    const result = await this.service.templateNotification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TemplateNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTemplateNotification(
    @common.Param() params: TemplateNotificationWhereUniqueInput,
    @common.Body() data: TemplateNotificationUpdateInput
  ): Promise<TemplateNotification | null> {
    try {
      return await this.service.updateTemplateNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TemplateNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTemplateNotification(
    @common.Param() params: TemplateNotificationWhereUniqueInput
  ): Promise<TemplateNotification | null> {
    try {
      return await this.service.deleteTemplateNotification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: TemplateNotificationWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        statut: true,

        templateNotification: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        utilisateur: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  async connectNotifications(
    @common.Param() params: TemplateNotificationWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateTemplateNotification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  async updateNotifications(
    @common.Param() params: TemplateNotificationWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateTemplateNotification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  async disconnectNotifications(
    @common.Param() params: TemplateNotificationWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateTemplateNotification({
      where: params,
      data,
      select: { id: true },
    });
  }
}
