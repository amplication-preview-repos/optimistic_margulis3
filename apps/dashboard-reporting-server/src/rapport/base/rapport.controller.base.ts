/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RapportService } from "../rapport.service";
import { RapportCreateInput } from "./RapportCreateInput";
import { Rapport } from "./Rapport";
import { RapportFindManyArgs } from "./RapportFindManyArgs";
import { RapportWhereUniqueInput } from "./RapportWhereUniqueInput";
import { RapportUpdateInput } from "./RapportUpdateInput";

export class RapportControllerBase {
  constructor(protected readonly service: RapportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rapport })
  async createRapport(
    @common.Body() data: RapportCreateInput
  ): Promise<Rapport> {
    return await this.service.createRapport({
      data: data,
      select: {
        contenu: true,
        createdAt: true,
        dateRapport: true,
        id: true,
        typeRapport: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rapport] })
  @ApiNestedQuery(RapportFindManyArgs)
  async rapports(@common.Req() request: Request): Promise<Rapport[]> {
    const args = plainToClass(RapportFindManyArgs, request.query);
    return this.service.rapports({
      ...args,
      select: {
        contenu: true,
        createdAt: true,
        dateRapport: true,
        id: true,
        typeRapport: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rapport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rapport(
    @common.Param() params: RapportWhereUniqueInput
  ): Promise<Rapport | null> {
    const result = await this.service.rapport({
      where: params,
      select: {
        contenu: true,
        createdAt: true,
        dateRapport: true,
        id: true,
        typeRapport: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rapport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRapport(
    @common.Param() params: RapportWhereUniqueInput,
    @common.Body() data: RapportUpdateInput
  ): Promise<Rapport | null> {
    try {
      return await this.service.updateRapport({
        where: params,
        data: data,
        select: {
          contenu: true,
          createdAt: true,
          dateRapport: true,
          id: true,
          typeRapport: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rapport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRapport(
    @common.Param() params: RapportWhereUniqueInput
  ): Promise<Rapport | null> {
    try {
      return await this.service.deleteRapport({
        where: params,
        select: {
          contenu: true,
          createdAt: true,
          dateRapport: true,
          id: true,
          typeRapport: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
