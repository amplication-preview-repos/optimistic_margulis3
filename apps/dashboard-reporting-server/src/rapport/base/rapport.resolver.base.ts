/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rapport } from "./Rapport";
import { RapportCountArgs } from "./RapportCountArgs";
import { RapportFindManyArgs } from "./RapportFindManyArgs";
import { RapportFindUniqueArgs } from "./RapportFindUniqueArgs";
import { CreateRapportArgs } from "./CreateRapportArgs";
import { UpdateRapportArgs } from "./UpdateRapportArgs";
import { DeleteRapportArgs } from "./DeleteRapportArgs";
import { RapportService } from "../rapport.service";
@graphql.Resolver(() => Rapport)
export class RapportResolverBase {
  constructor(protected readonly service: RapportService) {}

  async _rapportsMeta(
    @graphql.Args() args: RapportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rapport])
  async rapports(
    @graphql.Args() args: RapportFindManyArgs
  ): Promise<Rapport[]> {
    return this.service.rapports(args);
  }

  @graphql.Query(() => Rapport, { nullable: true })
  async rapport(
    @graphql.Args() args: RapportFindUniqueArgs
  ): Promise<Rapport | null> {
    const result = await this.service.rapport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rapport)
  async createRapport(
    @graphql.Args() args: CreateRapportArgs
  ): Promise<Rapport> {
    return await this.service.createRapport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Rapport)
  async updateRapport(
    @graphql.Args() args: UpdateRapportArgs
  ): Promise<Rapport | null> {
    try {
      return await this.service.updateRapport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rapport)
  async deleteRapport(
    @graphql.Args() args: DeleteRapportArgs
  ): Promise<Rapport | null> {
    try {
      return await this.service.deleteRapport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
