/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConditionnementProduit } from "./ConditionnementProduit";
import { ConditionnementProduitCountArgs } from "./ConditionnementProduitCountArgs";
import { ConditionnementProduitFindManyArgs } from "./ConditionnementProduitFindManyArgs";
import { ConditionnementProduitFindUniqueArgs } from "./ConditionnementProduitFindUniqueArgs";
import { CreateConditionnementProduitArgs } from "./CreateConditionnementProduitArgs";
import { UpdateConditionnementProduitArgs } from "./UpdateConditionnementProduitArgs";
import { DeleteConditionnementProduitArgs } from "./DeleteConditionnementProduitArgs";
import { ProduitFindManyArgs } from "../../produit/base/ProduitFindManyArgs";
import { Produit } from "../../produit/base/Produit";
import { ConditionnementProduitService } from "../conditionnementProduit.service";
@graphql.Resolver(() => ConditionnementProduit)
export class ConditionnementProduitResolverBase {
  constructor(protected readonly service: ConditionnementProduitService) {}

  async _conditionnementProduitsMeta(
    @graphql.Args() args: ConditionnementProduitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConditionnementProduit])
  async conditionnementProduits(
    @graphql.Args() args: ConditionnementProduitFindManyArgs
  ): Promise<ConditionnementProduit[]> {
    return this.service.conditionnementProduits(args);
  }

  @graphql.Query(() => ConditionnementProduit, { nullable: true })
  async conditionnementProduit(
    @graphql.Args() args: ConditionnementProduitFindUniqueArgs
  ): Promise<ConditionnementProduit | null> {
    const result = await this.service.conditionnementProduit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConditionnementProduit)
  async createConditionnementProduit(
    @graphql.Args() args: CreateConditionnementProduitArgs
  ): Promise<ConditionnementProduit> {
    return await this.service.createConditionnementProduit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ConditionnementProduit)
  async updateConditionnementProduit(
    @graphql.Args() args: UpdateConditionnementProduitArgs
  ): Promise<ConditionnementProduit | null> {
    try {
      return await this.service.updateConditionnementProduit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConditionnementProduit)
  async deleteConditionnementProduit(
    @graphql.Args() args: DeleteConditionnementProduitArgs
  ): Promise<ConditionnementProduit | null> {
    try {
      return await this.service.deleteConditionnementProduit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Produit], { name: "produits" })
  async findProduits(
    @graphql.Parent() parent: ConditionnementProduit,
    @graphql.Args() args: ProduitFindManyArgs
  ): Promise<Produit[]> {
    const results = await this.service.findProduits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
