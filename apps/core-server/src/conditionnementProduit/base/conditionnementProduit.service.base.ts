/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConditionnementProduit as PrismaConditionnementProduit,
  Produit as PrismaProduit,
} from "@prisma/client";

export class ConditionnementProduitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConditionnementProduitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conditionnementProduit.count(args);
  }

  async conditionnementProduits(
    args: Prisma.ConditionnementProduitFindManyArgs
  ): Promise<PrismaConditionnementProduit[]> {
    return this.prisma.conditionnementProduit.findMany(args);
  }
  async conditionnementProduit(
    args: Prisma.ConditionnementProduitFindUniqueArgs
  ): Promise<PrismaConditionnementProduit | null> {
    return this.prisma.conditionnementProduit.findUnique(args);
  }
  async createConditionnementProduit(
    args: Prisma.ConditionnementProduitCreateArgs
  ): Promise<PrismaConditionnementProduit> {
    return this.prisma.conditionnementProduit.create(args);
  }
  async updateConditionnementProduit(
    args: Prisma.ConditionnementProduitUpdateArgs
  ): Promise<PrismaConditionnementProduit> {
    return this.prisma.conditionnementProduit.update(args);
  }
  async deleteConditionnementProduit(
    args: Prisma.ConditionnementProduitDeleteArgs
  ): Promise<PrismaConditionnementProduit> {
    return this.prisma.conditionnementProduit.delete(args);
  }

  async findProduits(
    parentId: string,
    args: Prisma.ProduitFindManyArgs
  ): Promise<PrismaProduit[]> {
    return this.prisma.conditionnementProduit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .produits(args);
  }
}
