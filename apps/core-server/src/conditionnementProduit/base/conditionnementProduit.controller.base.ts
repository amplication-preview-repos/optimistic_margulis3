/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConditionnementProduitService } from "../conditionnementProduit.service";
import { ConditionnementProduitCreateInput } from "./ConditionnementProduitCreateInput";
import { ConditionnementProduit } from "./ConditionnementProduit";
import { ConditionnementProduitFindManyArgs } from "./ConditionnementProduitFindManyArgs";
import { ConditionnementProduitWhereUniqueInput } from "./ConditionnementProduitWhereUniqueInput";
import { ConditionnementProduitUpdateInput } from "./ConditionnementProduitUpdateInput";
import { ProduitFindManyArgs } from "../../produit/base/ProduitFindManyArgs";
import { Produit } from "../../produit/base/Produit";
import { ProduitWhereUniqueInput } from "../../produit/base/ProduitWhereUniqueInput";

export class ConditionnementProduitControllerBase {
  constructor(protected readonly service: ConditionnementProduitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConditionnementProduit })
  async createConditionnementProduit(
    @common.Body() data: ConditionnementProduitCreateInput
  ): Promise<ConditionnementProduit> {
    return await this.service.createConditionnementProduit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConditionnementProduit] })
  @ApiNestedQuery(ConditionnementProduitFindManyArgs)
  async conditionnementProduits(
    @common.Req() request: Request
  ): Promise<ConditionnementProduit[]> {
    const args = plainToClass(
      ConditionnementProduitFindManyArgs,
      request.query
    );
    return this.service.conditionnementProduits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConditionnementProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conditionnementProduit(
    @common.Param() params: ConditionnementProduitWhereUniqueInput
  ): Promise<ConditionnementProduit | null> {
    const result = await this.service.conditionnementProduit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConditionnementProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConditionnementProduit(
    @common.Param() params: ConditionnementProduitWhereUniqueInput,
    @common.Body() data: ConditionnementProduitUpdateInput
  ): Promise<ConditionnementProduit | null> {
    try {
      return await this.service.updateConditionnementProduit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConditionnementProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConditionnementProduit(
    @common.Param() params: ConditionnementProduitWhereUniqueInput
  ): Promise<ConditionnementProduit | null> {
    try {
      return await this.service.deleteConditionnementProduit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/produits")
  @ApiNestedQuery(ProduitFindManyArgs)
  async findProduits(
    @common.Req() request: Request,
    @common.Param() params: ConditionnementProduitWhereUniqueInput
  ): Promise<Produit[]> {
    const query = plainToClass(ProduitFindManyArgs, request.query);
    const results = await this.service.findProduits(params.id, {
      ...query,
      select: {
        caracteristiques: true,

        categorieProduit: {
          select: {
            id: true,
          },
        },

        conditionnementProduit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        image: true,
        nom: true,
        nomenclature: true,
        referenceErp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/produits")
  async connectProduits(
    @common.Param() params: ConditionnementProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        connect: body,
      },
    };
    await this.service.updateConditionnementProduit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/produits")
  async updateProduits(
    @common.Param() params: ConditionnementProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        set: body,
      },
    };
    await this.service.updateConditionnementProduit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/produits")
  async disconnectProduits(
    @common.Param() params: ConditionnementProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        disconnect: body,
      },
    };
    await this.service.updateConditionnementProduit({
      where: params,
      data,
      select: { id: true },
    });
  }
}
