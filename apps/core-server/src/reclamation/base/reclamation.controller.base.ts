/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReclamationService } from "../reclamation.service";
import { ReclamationCreateInput } from "./ReclamationCreateInput";
import { Reclamation } from "./Reclamation";
import { ReclamationFindManyArgs } from "./ReclamationFindManyArgs";
import { ReclamationWhereUniqueInput } from "./ReclamationWhereUniqueInput";
import { ReclamationUpdateInput } from "./ReclamationUpdateInput";

export class ReclamationControllerBase {
  constructor(protected readonly service: ReclamationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reclamation })
  async createReclamation(
    @common.Body() data: ReclamationCreateInput
  ): Promise<Reclamation> {
    return await this.service.createReclamation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reclamation] })
  @ApiNestedQuery(ReclamationFindManyArgs)
  async reclamations(@common.Req() request: Request): Promise<Reclamation[]> {
    const args = plainToClass(ReclamationFindManyArgs, request.query);
    return this.service.reclamations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reclamation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reclamation(
    @common.Param() params: ReclamationWhereUniqueInput
  ): Promise<Reclamation | null> {
    const result = await this.service.reclamation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reclamation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReclamation(
    @common.Param() params: ReclamationWhereUniqueInput,
    @common.Body() data: ReclamationUpdateInput
  ): Promise<Reclamation | null> {
    try {
      return await this.service.updateReclamation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reclamation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReclamation(
    @common.Param() params: ReclamationWhereUniqueInput
  ): Promise<Reclamation | null> {
    try {
      return await this.service.deleteReclamation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
