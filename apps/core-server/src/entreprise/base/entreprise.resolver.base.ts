/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Entreprise } from "./Entreprise";
import { EntrepriseCountArgs } from "./EntrepriseCountArgs";
import { EntrepriseFindManyArgs } from "./EntrepriseFindManyArgs";
import { EntrepriseFindUniqueArgs } from "./EntrepriseFindUniqueArgs";
import { CreateEntrepriseArgs } from "./CreateEntrepriseArgs";
import { UpdateEntrepriseArgs } from "./UpdateEntrepriseArgs";
import { DeleteEntrepriseArgs } from "./DeleteEntrepriseArgs";
import { EntrepriseService } from "../entreprise.service";
@graphql.Resolver(() => Entreprise)
export class EntrepriseResolverBase {
  constructor(protected readonly service: EntrepriseService) {}

  async _entreprisesMeta(
    @graphql.Args() args: EntrepriseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Entreprise])
  async entreprises(
    @graphql.Args() args: EntrepriseFindManyArgs
  ): Promise<Entreprise[]> {
    return this.service.entreprises(args);
  }

  @graphql.Query(() => Entreprise, { nullable: true })
  async entreprise(
    @graphql.Args() args: EntrepriseFindUniqueArgs
  ): Promise<Entreprise | null> {
    const result = await this.service.entreprise(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Entreprise)
  async createEntreprise(
    @graphql.Args() args: CreateEntrepriseArgs
  ): Promise<Entreprise> {
    return await this.service.createEntreprise({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Entreprise)
  async updateEntreprise(
    @graphql.Args() args: UpdateEntrepriseArgs
  ): Promise<Entreprise | null> {
    try {
      return await this.service.updateEntreprise({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Entreprise)
  async deleteEntreprise(
    @graphql.Args() args: DeleteEntrepriseArgs
  ): Promise<Entreprise | null> {
    try {
      return await this.service.deleteEntreprise(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
