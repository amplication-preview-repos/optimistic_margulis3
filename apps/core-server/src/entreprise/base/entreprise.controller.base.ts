/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EntrepriseService } from "../entreprise.service";
import { EntrepriseCreateInput } from "./EntrepriseCreateInput";
import { Entreprise } from "./Entreprise";
import { EntrepriseFindManyArgs } from "./EntrepriseFindManyArgs";
import { EntrepriseWhereUniqueInput } from "./EntrepriseWhereUniqueInput";
import { EntrepriseUpdateInput } from "./EntrepriseUpdateInput";

export class EntrepriseControllerBase {
  constructor(protected readonly service: EntrepriseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Entreprise })
  async createEntreprise(
    @common.Body() data: EntrepriseCreateInput
  ): Promise<Entreprise> {
    return await this.service.createEntreprise({
      data: data,
      select: {
        adressesLivraison: true,
        createdAt: true,
        id: true,
        logo: true,
        margeDette: true,
        nom: true,
        signatureNumerique: true,
        soldeClient: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Entreprise] })
  @ApiNestedQuery(EntrepriseFindManyArgs)
  async entreprises(@common.Req() request: Request): Promise<Entreprise[]> {
    const args = plainToClass(EntrepriseFindManyArgs, request.query);
    return this.service.entreprises({
      ...args,
      select: {
        adressesLivraison: true,
        createdAt: true,
        id: true,
        logo: true,
        margeDette: true,
        nom: true,
        signatureNumerique: true,
        soldeClient: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async entreprise(
    @common.Param() params: EntrepriseWhereUniqueInput
  ): Promise<Entreprise | null> {
    const result = await this.service.entreprise({
      where: params,
      select: {
        adressesLivraison: true,
        createdAt: true,
        id: true,
        logo: true,
        margeDette: true,
        nom: true,
        signatureNumerique: true,
        soldeClient: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEntreprise(
    @common.Param() params: EntrepriseWhereUniqueInput,
    @common.Body() data: EntrepriseUpdateInput
  ): Promise<Entreprise | null> {
    try {
      return await this.service.updateEntreprise({
        where: params,
        data: data,
        select: {
          adressesLivraison: true,
          createdAt: true,
          id: true,
          logo: true,
          margeDette: true,
          nom: true,
          signatureNumerique: true,
          soldeClient: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Entreprise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEntreprise(
    @common.Param() params: EntrepriseWhereUniqueInput
  ): Promise<Entreprise | null> {
    try {
      return await this.service.deleteEntreprise({
        where: params,
        select: {
          adressesLivraison: true,
          createdAt: true,
          id: true,
          logo: true,
          margeDette: true,
          nom: true,
          signatureNumerique: true,
          soldeClient: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
