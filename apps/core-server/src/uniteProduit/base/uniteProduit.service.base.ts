/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UniteProduit as PrismaUniteProduit } from "@prisma/client";

export class UniteProduitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UniteProduitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uniteProduit.count(args);
  }

  async uniteProduits(
    args: Prisma.UniteProduitFindManyArgs
  ): Promise<PrismaUniteProduit[]> {
    return this.prisma.uniteProduit.findMany(args);
  }
  async uniteProduit(
    args: Prisma.UniteProduitFindUniqueArgs
  ): Promise<PrismaUniteProduit | null> {
    return this.prisma.uniteProduit.findUnique(args);
  }
  async createUniteProduit(
    args: Prisma.UniteProduitCreateArgs
  ): Promise<PrismaUniteProduit> {
    return this.prisma.uniteProduit.create(args);
  }
  async updateUniteProduit(
    args: Prisma.UniteProduitUpdateArgs
  ): Promise<PrismaUniteProduit> {
    return this.prisma.uniteProduit.update(args);
  }
  async deleteUniteProduit(
    args: Prisma.UniteProduitDeleteArgs
  ): Promise<PrismaUniteProduit> {
    return this.prisma.uniteProduit.delete(args);
  }
}
