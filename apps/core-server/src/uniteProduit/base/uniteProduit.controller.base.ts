/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UniteProduitService } from "../uniteProduit.service";
import { UniteProduitCreateInput } from "./UniteProduitCreateInput";
import { UniteProduit } from "./UniteProduit";
import { UniteProduitFindManyArgs } from "./UniteProduitFindManyArgs";
import { UniteProduitWhereUniqueInput } from "./UniteProduitWhereUniqueInput";
import { UniteProduitUpdateInput } from "./UniteProduitUpdateInput";

export class UniteProduitControllerBase {
  constructor(protected readonly service: UniteProduitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UniteProduit })
  async createUniteProduit(
    @common.Body() data: UniteProduitCreateInput
  ): Promise<UniteProduit> {
    return await this.service.createUniteProduit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        libelle: true,
        symbole: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UniteProduit] })
  @ApiNestedQuery(UniteProduitFindManyArgs)
  async uniteProduits(@common.Req() request: Request): Promise<UniteProduit[]> {
    const args = plainToClass(UniteProduitFindManyArgs, request.query);
    return this.service.uniteProduits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        libelle: true,
        symbole: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UniteProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uniteProduit(
    @common.Param() params: UniteProduitWhereUniqueInput
  ): Promise<UniteProduit | null> {
    const result = await this.service.uniteProduit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        libelle: true,
        symbole: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UniteProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUniteProduit(
    @common.Param() params: UniteProduitWhereUniqueInput,
    @common.Body() data: UniteProduitUpdateInput
  ): Promise<UniteProduit | null> {
    try {
      return await this.service.updateUniteProduit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          libelle: true,
          symbole: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UniteProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUniteProduit(
    @common.Param() params: UniteProduitWhereUniqueInput
  ): Promise<UniteProduit | null> {
    try {
      return await this.service.deleteUniteProduit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          libelle: true,
          symbole: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
