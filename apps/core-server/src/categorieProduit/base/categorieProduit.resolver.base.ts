/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CategorieProduit } from "./CategorieProduit";
import { CategorieProduitCountArgs } from "./CategorieProduitCountArgs";
import { CategorieProduitFindManyArgs } from "./CategorieProduitFindManyArgs";
import { CategorieProduitFindUniqueArgs } from "./CategorieProduitFindUniqueArgs";
import { CreateCategorieProduitArgs } from "./CreateCategorieProduitArgs";
import { UpdateCategorieProduitArgs } from "./UpdateCategorieProduitArgs";
import { DeleteCategorieProduitArgs } from "./DeleteCategorieProduitArgs";
import { ProduitFindManyArgs } from "../../produit/base/ProduitFindManyArgs";
import { Produit } from "../../produit/base/Produit";
import { CategorieProduitService } from "../categorieProduit.service";
@graphql.Resolver(() => CategorieProduit)
export class CategorieProduitResolverBase {
  constructor(protected readonly service: CategorieProduitService) {}

  async _categorieProduitsMeta(
    @graphql.Args() args: CategorieProduitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CategorieProduit])
  async categorieProduits(
    @graphql.Args() args: CategorieProduitFindManyArgs
  ): Promise<CategorieProduit[]> {
    return this.service.categorieProduits(args);
  }

  @graphql.Query(() => CategorieProduit, { nullable: true })
  async categorieProduit(
    @graphql.Args() args: CategorieProduitFindUniqueArgs
  ): Promise<CategorieProduit | null> {
    const result = await this.service.categorieProduit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CategorieProduit)
  async createCategorieProduit(
    @graphql.Args() args: CreateCategorieProduitArgs
  ): Promise<CategorieProduit> {
    return await this.service.createCategorieProduit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CategorieProduit)
  async updateCategorieProduit(
    @graphql.Args() args: UpdateCategorieProduitArgs
  ): Promise<CategorieProduit | null> {
    try {
      return await this.service.updateCategorieProduit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CategorieProduit)
  async deleteCategorieProduit(
    @graphql.Args() args: DeleteCategorieProduitArgs
  ): Promise<CategorieProduit | null> {
    try {
      return await this.service.deleteCategorieProduit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Produit], { name: "produits" })
  async findProduits(
    @graphql.Parent() parent: CategorieProduit,
    @graphql.Args() args: ProduitFindManyArgs
  ): Promise<Produit[]> {
    const results = await this.service.findProduits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
