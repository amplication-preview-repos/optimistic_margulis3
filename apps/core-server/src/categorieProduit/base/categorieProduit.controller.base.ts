/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategorieProduitService } from "../categorieProduit.service";
import { CategorieProduitCreateInput } from "./CategorieProduitCreateInput";
import { CategorieProduit } from "./CategorieProduit";
import { CategorieProduitFindManyArgs } from "./CategorieProduitFindManyArgs";
import { CategorieProduitWhereUniqueInput } from "./CategorieProduitWhereUniqueInput";
import { CategorieProduitUpdateInput } from "./CategorieProduitUpdateInput";
import { ProduitFindManyArgs } from "../../produit/base/ProduitFindManyArgs";
import { Produit } from "../../produit/base/Produit";
import { ProduitWhereUniqueInput } from "../../produit/base/ProduitWhereUniqueInput";

export class CategorieProduitControllerBase {
  constructor(protected readonly service: CategorieProduitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CategorieProduit })
  async createCategorieProduit(
    @common.Body() data: CategorieProduitCreateInput
  ): Promise<CategorieProduit> {
    return await this.service.createCategorieProduit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CategorieProduit] })
  @ApiNestedQuery(CategorieProduitFindManyArgs)
  async categorieProduits(
    @common.Req() request: Request
  ): Promise<CategorieProduit[]> {
    const args = plainToClass(CategorieProduitFindManyArgs, request.query);
    return this.service.categorieProduits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CategorieProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async categorieProduit(
    @common.Param() params: CategorieProduitWhereUniqueInput
  ): Promise<CategorieProduit | null> {
    const result = await this.service.categorieProduit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CategorieProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCategorieProduit(
    @common.Param() params: CategorieProduitWhereUniqueInput,
    @common.Body() data: CategorieProduitUpdateInput
  ): Promise<CategorieProduit | null> {
    try {
      return await this.service.updateCategorieProduit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CategorieProduit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCategorieProduit(
    @common.Param() params: CategorieProduitWhereUniqueInput
  ): Promise<CategorieProduit | null> {
    try {
      return await this.service.deleteCategorieProduit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/produits")
  @ApiNestedQuery(ProduitFindManyArgs)
  async findProduits(
    @common.Req() request: Request,
    @common.Param() params: CategorieProduitWhereUniqueInput
  ): Promise<Produit[]> {
    const query = plainToClass(ProduitFindManyArgs, request.query);
    const results = await this.service.findProduits(params.id, {
      ...query,
      select: {
        caracteristiques: true,

        categorieProduit: {
          select: {
            id: true,
          },
        },

        conditionnementProduit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        image: true,
        nom: true,
        nomenclature: true,
        referenceErp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/produits")
  async connectProduits(
    @common.Param() params: CategorieProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        connect: body,
      },
    };
    await this.service.updateCategorieProduit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/produits")
  async updateProduits(
    @common.Param() params: CategorieProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        set: body,
      },
    };
    await this.service.updateCategorieProduit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/produits")
  async disconnectProduits(
    @common.Param() params: CategorieProduitWhereUniqueInput,
    @common.Body() body: ProduitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      produits: {
        disconnect: body,
      },
    };
    await this.service.updateCategorieProduit({
      where: params,
      data,
      select: { id: true },
    });
  }
}
