/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CategorieProduit as PrismaCategorieProduit,
  Produit as PrismaProduit,
} from "@prisma/client";

export class CategorieProduitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategorieProduitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categorieProduit.count(args);
  }

  async categorieProduits(
    args: Prisma.CategorieProduitFindManyArgs
  ): Promise<PrismaCategorieProduit[]> {
    return this.prisma.categorieProduit.findMany(args);
  }
  async categorieProduit(
    args: Prisma.CategorieProduitFindUniqueArgs
  ): Promise<PrismaCategorieProduit | null> {
    return this.prisma.categorieProduit.findUnique(args);
  }
  async createCategorieProduit(
    args: Prisma.CategorieProduitCreateArgs
  ): Promise<PrismaCategorieProduit> {
    return this.prisma.categorieProduit.create(args);
  }
  async updateCategorieProduit(
    args: Prisma.CategorieProduitUpdateArgs
  ): Promise<PrismaCategorieProduit> {
    return this.prisma.categorieProduit.update(args);
  }
  async deleteCategorieProduit(
    args: Prisma.CategorieProduitDeleteArgs
  ): Promise<PrismaCategorieProduit> {
    return this.prisma.categorieProduit.delete(args);
  }

  async findProduits(
    parentId: string,
    args: Prisma.ProduitFindManyArgs
  ): Promise<PrismaProduit[]> {
    return this.prisma.categorieProduit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .produits(args);
  }
}
