/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OffrePrixService } from "../offrePrix.service";
import { OffrePrixCreateInput } from "./OffrePrixCreateInput";
import { OffrePrix } from "./OffrePrix";
import { OffrePrixFindManyArgs } from "./OffrePrixFindManyArgs";
import { OffrePrixWhereUniqueInput } from "./OffrePrixWhereUniqueInput";
import { OffrePrixUpdateInput } from "./OffrePrixUpdateInput";

export class OffrePrixControllerBase {
  constructor(protected readonly service: OffrePrixService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OffrePrix })
  async createOffrePrix(
    @common.Body() data: OffrePrixCreateInput
  ): Promise<OffrePrix> {
    return await this.service.createOffrePrix({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OffrePrix] })
  @ApiNestedQuery(OffrePrixFindManyArgs)
  async offrePrixes(@common.Req() request: Request): Promise<OffrePrix[]> {
    const args = plainToClass(OffrePrixFindManyArgs, request.query);
    return this.service.offrePrixes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OffrePrix })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async offrePrix(
    @common.Param() params: OffrePrixWhereUniqueInput
  ): Promise<OffrePrix | null> {
    const result = await this.service.offrePrix({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OffrePrix })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOffrePrix(
    @common.Param() params: OffrePrixWhereUniqueInput,
    @common.Body() data: OffrePrixUpdateInput
  ): Promise<OffrePrix | null> {
    try {
      return await this.service.updateOffrePrix({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OffrePrix })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOffrePrix(
    @common.Param() params: OffrePrixWhereUniqueInput
  ): Promise<OffrePrix | null> {
    try {
      return await this.service.deleteOffrePrix({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
