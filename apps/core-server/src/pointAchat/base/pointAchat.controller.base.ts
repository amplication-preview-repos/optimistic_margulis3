/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PointAchatService } from "../pointAchat.service";
import { PointAchatCreateInput } from "./PointAchatCreateInput";
import { PointAchat } from "./PointAchat";
import { PointAchatFindManyArgs } from "./PointAchatFindManyArgs";
import { PointAchatWhereUniqueInput } from "./PointAchatWhereUniqueInput";
import { PointAchatUpdateInput } from "./PointAchatUpdateInput";

export class PointAchatControllerBase {
  constructor(protected readonly service: PointAchatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PointAchat })
  async createPointAchat(
    @common.Body() data: PointAchatCreateInput
  ): Promise<PointAchat> {
    return await this.service.createPointAchat({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PointAchat] })
  @ApiNestedQuery(PointAchatFindManyArgs)
  async pointAchats(@common.Req() request: Request): Promise<PointAchat[]> {
    const args = plainToClass(PointAchatFindManyArgs, request.query);
    return this.service.pointAchats({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PointAchat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pointAchat(
    @common.Param() params: PointAchatWhereUniqueInput
  ): Promise<PointAchat | null> {
    const result = await this.service.pointAchat({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PointAchat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePointAchat(
    @common.Param() params: PointAchatWhereUniqueInput,
    @common.Body() data: PointAchatUpdateInput
  ): Promise<PointAchat | null> {
    try {
      return await this.service.updatePointAchat({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PointAchat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePointAchat(
    @common.Param() params: PointAchatWhereUniqueInput
  ): Promise<PointAchat | null> {
    try {
      return await this.service.deletePointAchat({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
