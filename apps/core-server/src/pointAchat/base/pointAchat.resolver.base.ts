/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PointAchat } from "./PointAchat";
import { PointAchatCountArgs } from "./PointAchatCountArgs";
import { PointAchatFindManyArgs } from "./PointAchatFindManyArgs";
import { PointAchatFindUniqueArgs } from "./PointAchatFindUniqueArgs";
import { DeletePointAchatArgs } from "./DeletePointAchatArgs";
import { PointAchatService } from "../pointAchat.service";
@graphql.Resolver(() => PointAchat)
export class PointAchatResolverBase {
  constructor(protected readonly service: PointAchatService) {}

  async _pointAchatsMeta(
    @graphql.Args() args: PointAchatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PointAchat])
  async pointAchats(
    @graphql.Args() args: PointAchatFindManyArgs
  ): Promise<PointAchat[]> {
    return this.service.pointAchats(args);
  }

  @graphql.Query(() => PointAchat, { nullable: true })
  async pointAchat(
    @graphql.Args() args: PointAchatFindUniqueArgs
  ): Promise<PointAchat | null> {
    const result = await this.service.pointAchat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PointAchat)
  async deletePointAchat(
    @graphql.Args() args: DeletePointAchatArgs
  ): Promise<PointAchat | null> {
    try {
      return await this.service.deletePointAchat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
