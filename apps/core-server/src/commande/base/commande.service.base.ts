/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Commande as PrismaCommande } from "@prisma/client";

export class CommandeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommandeCountArgs, "select">): Promise<number> {
    return this.prisma.commande.count(args);
  }

  async commandes(
    args: Prisma.CommandeFindManyArgs
  ): Promise<PrismaCommande[]> {
    return this.prisma.commande.findMany(args);
  }
  async commande(
    args: Prisma.CommandeFindUniqueArgs
  ): Promise<PrismaCommande | null> {
    return this.prisma.commande.findUnique(args);
  }
  async createCommande(
    args: Prisma.CommandeCreateArgs
  ): Promise<PrismaCommande> {
    return this.prisma.commande.create(args);
  }
  async updateCommande(
    args: Prisma.CommandeUpdateArgs
  ): Promise<PrismaCommande> {
    return this.prisma.commande.update(args);
  }
  async deleteCommande(
    args: Prisma.CommandeDeleteArgs
  ): Promise<PrismaCommande> {
    return this.prisma.commande.delete(args);
  }
}
